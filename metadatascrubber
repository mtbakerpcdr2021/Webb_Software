from PIL import Image
from PyPDF2 import PdfReader, PdfWriter
import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image
from PyPDF2 import PdfReader, PdfWriter
import os


def clean_image_metadata(image_path, output_path):
    with Image.open(image_path) as img:
        data = img.getdata()
        clean_img = Image.new(img.mode, img.size)
        clean_img.putdata(data)
        clean_img.save(output_path)
        messagebox.showinfo("Success", f"The image has been cleaned and saved as '{output_path}'!")


def clean_pdf_metadata(pdf_path, output_path):
    reader = PdfReader(pdf_path)
    writer = PdfWriter()

    for page in reader.pages:
        writer.add_page(page)

    writer.add_metadata({})
    with open(output_path, 'wb') as f:
        writer.write(f)
    messagebox.showinfo("Success", f"The PDF has been cleaned and saved as '{output_path}'!")


def clean_file():
    file_path = filedialog.askopenfilename()
    if not file_path:
        return

    file_type = os.path.splitext(file_path)[1].lower()

    # Set options for save file dialog to ensure user knows they are saving a new file
    options = {
        'defaultextension': file_type,
        'filetypes': [('All files', '*.*')],
        'initialfile': 'SaveFileMetaDataFree' + os.path.basename(file_path)
    }
    output_path = filedialog.asksaveasfilename(**options)

    if not output_path:
        return  # Exit if user cancels the save operation

    if file_type in ['.jpg', '.jpeg', '.png']:
        clean_image_metadata(file_path, output_path)
    elif file_type == '.pdf':
        clean_pdf_metadata(file_path, output_path)
    else:
        messagebox.showerror("Error", "Unsupported file type. Only images and PDFs are supported.")


def setup_gui():
    root = tk.Tk()
    root.title("Metadata Cleaner")
    root.geometry("400x200")
    root.config(bg="#874ede")

    title_label = tk.Label(root, text="Metadata Cleaner", bg="#000000", fg="#ff0008", font=('Helvetica', 16, 'bold'))
    title_label.pack(pady=20)

    browse_button = tk.Button(root, text="Browse File", command=clean_file, bg="#49b344", fg="#5a14ff",
                              font=('Helvetica', 12, 'bold'))
    browse_button.pack(pady=10)

    root.mainloop()


if __name__ == "__main__":
    setup_gui()

