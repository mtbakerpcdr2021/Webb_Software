import tkinter as tk
import numpy as np
import time

def update_canvas():
    global items
    # Gradually fade out the trail items over time
    for item, depth in list(items.items()):  # Iterate over a copy to allow modification
        current_color = canvas.itemcget(item, "fill")
        r, g, b = tuple(int(current_color[i:i+2], 16) for i in (1, 3, 5))
        if r > 10: r -= 10
        if g > 10: g -= 10
        if b > 10: b -= 10
        new_color = f'#{r:02x}{g:02x}{b:02x}'
        canvas.itemconfig(item, fill=new_color)
        # Remove the item if it is too dark
        if r < 10 and g < 10 and b < 10:
            canvas.delete(item)
            del items[item]
    root.after(50, update_canvas)

def draw_pattern(event):
    x, y = event.x, event.y
    draw_fractal(x, y, 20, 3)  # Draw fractal pattern with depth 3

def draw_fractal(x, y, radius, depth):
    if depth > 0:
        color = calculate_color(x, y)
        # Draw the main circle
        item = create_circle(x, y, radius, color)
        # Recursively draw mirrored circles at smaller sizes
        draw_fractal(window_width - x, y, radius * 0.8, depth - 1)
        draw_fractal(x, window_height - y, radius * 0.8, depth - 1)
        draw_fractal(window_width - x, window_height - y, radius * 0.8, depth - 1)

def create_circle(x, y, radius, color):
    item = canvas.create_oval(x - radius, y - radius, x + radius, y + radius, fill=color, outline="")
    items[item] = 0  # Track item without specific depth
    return item

def calculate_color(x, y):
    # Dynamic color based on position and a function of time
    r = int(abs(np.sin(time.time() * 0.1 + x / window_width)) * 255)
    g = int(abs(np.cos(time.time() * 0.1 + y / window_height)) * 255)
    b = 255 - r
    return f'#{r:02x}{g:02x}{b:02x}'

# Set up the main window
root = tk.Tk()
root.title("PsycheSwirl Ultra+")
window_width = root.winfo_screenwidth()
window_height = root.winfo_screenheight()
root.geometry(f"{window_width}x{window_height}")

# Create a canvas
canvas = tk.Canvas(root, width=window_width, height=window_height, bg='black')
canvas.pack(fill=tk.BOTH, expand=True)

items = {}  # Dictionary to keep track of all circle items and their properties

canvas.bind("<Motion>", draw_pattern)

root.after(50, update_canvas)  # Start the color update loop
root.mainloop()
